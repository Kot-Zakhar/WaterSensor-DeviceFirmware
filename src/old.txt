#include <BluetoothSerial.h>
#include <Preferences.h>

#define STRING_LENGTH 100
#define SET_WIFI_COMMAND 10
#define WIFI_CLEAR_RECORDS 15

BluetoothSerial SerialBT;
Preferences preferences;

const char* wifi_ssid_key_prefix = "ssid";
const char* wifi_password_key_prefix = "pass";
const char* wifi_amount_key = "amount";
const char* confirmation = "saved\n";
const char* deleting = "deleted\n";

char* wifi_ssid_key;
char* wifi_password_key;
char* wifi_ssid;
char* wifi_password;

char* charBuffer;

unsigned int counter = 0;



void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32");
  Serial.println("You can pair to ESP32");
  wifi_ssid_key = (char*) malloc(6 * sizeof(char));
  wifi_password_key = (char*) malloc(6 * sizeof(char));

  charBuffer = (char*) malloc(STRING_LENGTH * sizeof(char));

  wifi_ssid = (char*) malloc(STRING_LENGTH * sizeof(char));
  wifi_password = (char*) malloc(STRING_LENGTH * sizeof(char));

  preferences.begin("bt_wifi", false);
  // preferences.clear();

  counter = preferences.getUInt(wifi_amount_key, 0);

  if (counter == 0){
    Serial.println("No networks in memory");
  } else {
    for (int i = 0; i < counter; i++){
      sprintf(wifi_ssid_key, "%s%d", wifi_ssid_key_prefix, i);
      sprintf(wifi_password_key, "%s%d", wifi_password_key_prefix, i);

      preferences.getString(wifi_ssid_key, wifi_ssid, STRING_LENGTH);
      preferences.getString(wifi_password_key, wifi_password, STRING_LENGTH);
      
      Serial.println(String(i) + ": '" + String(wifi_ssid) + "' - '" + String(wifi_password) + "';");
    }
  }
  
}

void loop() {
  
  if (SerialBT.available()){
    Serial.println("reading command");
    char* currentChar = charBuffer;
    *currentChar = 0;
    
    while (SerialBT.available()) {
      *currentChar = (char)SerialBT.read();
      currentChar++;
      *currentChar = 0;
    }
  
    if (currentChar != charBuffer){
      Serial.println(String("command: ") + String(charBuffer));
      int command = 0;
      sscanf(charBuffer, "%d", &command);
      if (command == SET_WIFI_COMMAND){
        
        SerialBT.write((const uint8_t *)wifi_ssid_key_prefix, 4);
        SerialBT.write('\n');

        currentChar = charBuffer;
        *currentChar = 0;

        while (!SerialBT.available()){}
        while (SerialBT.available()) {
          *currentChar = (char)SerialBT.read();
          currentChar++;
          *currentChar = 0;
        }

        String wifiSsid = String(charBuffer);
        wifiSsid.setCharAt(wifiSsid.indexOf('\n'), 0);
  
        sprintf(wifi_ssid_key, "%s%d", wifi_ssid_key_prefix, counter);

        preferences.putString(wifi_ssid_key, wifiSsid.c_str());


        

        SerialBT.write((const uint8_t *)wifi_password_key_prefix, 4);
        SerialBT.write('\n');

        currentChar = charBuffer;
        *currentChar = 0;

        while (!SerialBT.available()){}
        while (SerialBT.available()) {
          *currentChar = (char)SerialBT.read();
          currentChar++;
          *currentChar = 0;
        }

        String wifiPassword = String(charBuffer);
        wifiPassword.setCharAt(wifiPassword.indexOf('\n'), 0);

        sprintf(wifi_password_key, "%s%d", wifi_password_key_prefix, counter);
        
        preferences.putString(wifi_password_key, wifiPassword.c_str());


        

        SerialBT.write((const uint8_t *)confirmation, 6);
        counter++;
        preferences.putUInt(wifi_amount_key, counter);
        
      }

      if (command == WIFI_CLEAR_RECORDS){
        preferences.clear();
        preferences.putUInt(wifi_amount_key, 0);
        SerialBT.write((const uint8_t *) deleting, 8);
      }
    } 
  }

  delay(20);
    
}
